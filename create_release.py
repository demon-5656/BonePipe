#!/usr/bin/env python3
import os
import shutil
import subprocess

VERSION = "3.0.12"
JAR_NAME = f"bonepipe-{VERSION}.jar"
RELEASE_JAR = f"bonepipe-{VERSION}-release.jar"

JAR_PATH = os.path.join("build", "libs", JAR_NAME)
# mods dir for PrismLauncher
MODS_DIR = os.path.expanduser("~/.local/share/PrismLauncher/instances/1.19.2/minecraft/mods")

print(f"üöÄ Creating BonePipe v{VERSION} release...")

# Check if JAR exists
if not os.path.isfile(JAR_PATH):
    print(f"‚ùå Error: {JAR_NAME} not found in build/libs/")
    print("Run ./gradlew build first")
    exit(1)


# Copy JAR for release
shutil.copy(JAR_PATH, RELEASE_JAR)
size = os.path.getsize(RELEASE_JAR) // 1024
print(f"‚úÖ Created {RELEASE_JAR} (Size: {size}K)")

# Copy JAR to mods dir for testing
if os.path.isdir(MODS_DIR):
    # Remove old versions
    for f in os.listdir(MODS_DIR):
        if f.startswith("bonepipe-") and f.endswith(".jar"):
            os.remove(os.path.join(MODS_DIR, f))
    shutil.copy(JAR_PATH, os.path.join(MODS_DIR, JAR_NAME))
    print(f"‚úÖ Installed: {os.path.join(MODS_DIR, JAR_NAME)}")
else:
    print(f"‚ùå Mods directory not found: {MODS_DIR}")

# Create release notes
notes = f"""## ü¶¥ BonePipe v{VERSION}

### ‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏ –≥–∞–∑–æ–≤
- –ê–¥–∞–ø—Ç–µ—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Å—Ç–æ—Ç—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Mekanism Gas
- –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º

### üì¶ –ü–∞–∫–µ—Ç
- Minecraft: 1.19.2
- Forge: 43.3.0+
- –†–∞–∑–º–µ—Ä: {size}K

### üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞
1. –°–∫–∞—á–∞—Ç—å {RELEASE_JAR}
2. –ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É mods/
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft 1.19.2 —Å Forge

### üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ v{VERSION}
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å NPE –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∏—Ä–∞
- –£–ª—É—á—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º
"""
with open("release_notes.txt", "w", encoding="utf-8") as f:
    f.write(notes)


print(f"üåê Creating GitHub release v{VERSION}...")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑
check_cmd = ["gh", "release", "view", f"v{VERSION}"]
check_result = subprocess.run(check_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
if check_result.returncode == 0:
    print(f"‚ÑπÔ∏è Release v{VERSION} already exists. Uploading jar...")
    upload_cmd = ["gh", "release", "upload", f"v{VERSION}", RELEASE_JAR]
    upload_result = subprocess.run(upload_cmd)
    if upload_result.returncode == 0:
        print(f"‚úÖ File {RELEASE_JAR} uploaded to release v{VERSION}!")
        print(f"üîó https://github.com/demon-5656/BonePipe/releases/tag/v{VERSION}")
    else:
        print(f"‚ùå Failed to upload file to release v{VERSION}")
        print(f"You can upload manually with:\n  {' '.join(upload_cmd)}")
        exit(1)
else:
    cmd = [
        "gh", "release", "create", f"v{VERSION}",
        RELEASE_JAR,
        "--title", f"BonePipe v{VERSION} ‚Äî Stable Release",
        "--notes-file", "release_notes.txt"
    ]
    result = subprocess.run(cmd)
    if result.returncode == 0:
        print(f"‚úÖ Release v{VERSION} created successfully!")
        print(f"üîó https://github.com/demon-5656/BonePipe/releases/tag/v{VERSION}")
    else:
        print("‚ùå Failed to create release")
        print(f"You can create it manually with:\n  {' '.join(cmd)}")
        exit(1)

print(f"\nüéâ Done! Release v{VERSION} is ready for testing!")
